{"version":3,"sources":["base/hooks/api-action.ts","base/hooks/request.ts","base/components/section/index.tsx","modules/application/details/microfrontend-list.tsx","modules/application/details/namespace-list.tsx","base/components/page/index.tsx","modules/application/fetch.tsx","modules/application/details/index.tsx","modules/application/list.tsx","modules/application/index.tsx","modules/microfrontend/form.tsx","modules/microfrontend/details.tsx","modules/microfrontend/new.tsx","modules/microfrontend/list.tsx","modules/microfrontend/index.tsx","modules/version/form.tsx","modules/version/details.tsx","modules/version/new.tsx","modules/version/index.tsx","base/hooks/query-param.ts","modules/github/import.tsx","modules/github/repositories.tsx","modules/github/index.tsx","modules/account/profile.tsx","modules/namespace/details/deploy-list.tsx","modules/namespace/fetch.tsx","modules/namespace/details/index.tsx","modules/namespace/deploy.tsx","modules/namespace/index.tsx","app/home/index.tsx","modules/github/login.tsx","base/hooks/local-storage.ts","base/hooks/user.ts","modules/account/logout.tsx","modules/landing/index.tsx","app/router.tsx","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["useApiAction","url","options","key","Math","ceil","random","toString","method","useLoggedApiRequest","manual","data","loading","error","makeRequest","showMessage","type","messageOptions","message","messageContructor","content","apply","params","default","config","a","response","console","log","status","BASE_URL","useApiRequest","makeUseAxios","axios","Axios","create","baseURL","useGithubApiRequest","configureLoggedUser","loggedUser","token","headers","Authorization","token_type","access_token","interceptors","use","res","localStorage","removeItem","window","location","reload","Promise","reject","configure","configureLoggedApiRequest","api","github","Title","Typography","Section","this","props","title","children","level","justify","size","React","MicrofrontendList","applicationId","microfrontends","refetch","useEffect","gutter","map","microfrontend","span","id","name","extra","to","NamespaceList","namespaces","Page","history","useHistory","actions","subTitle","rootPage","className","onBack","goBack","style","marginTop","FetchApplication","applicationIdProp","useParams","application","loadingApplication","ApplicationDetails","success","savingProfile","saveApplication","deployingApplication","deployApplication","gettingNamespaces","refetchNamespaces","onFinish","initialValues","Item","label","htmlType","length","onClick","ApplicationList","applications","itemLayout","dataSource","renderItem","Meta","description","ApplicationHome","match","useRouteMatch","path","NewMicrofrontend","isNew","syncMicrofrontend","versions","result","createmicrofrontend","values","columns","dataIndex","render","asd","handleSyncClick","labelCol","onFinishFailed","errorInfo","v","version","color","createdAt","MicrofrontendDetails","microfrontendId","MicrofrontendsHome","exact","NewVersion","createVersion","approveVersion","URLSearchParams","useLocation","search","get","files","rest","reduce","agg","file","endsWith","cssFiles","push","jsFiles","js","css","handleApprove","margin","rules","required","VersionDetails","versionId","VersionsHome","useQuery","ImportRepository","owner","repositoryName","repositoryFullName","Form","useForm","form","useState","importType","setImportType","shouldShowImportType","shouldShowApplicationIdField","repository","loadingRepository","importedApplication","importingApplication","importApplication","importedMicrofrontend","importingMicrofrotend","importMicrofrontend","packageName","onValuesChange","Group","value","Button","disabled","importApplicationId","IconText","icon","text","createElement","marginRight","Repos","searchText","setSearchText","repos","queryParam","getUrlToImport","repo","full_name","placeholder","prefix","SearchOutlined","onChange","e","target","filter","indexOf","StarOutlined","stargazers_count","MessageOutlined","open_issues","avatar","GithubOutlined","GithubHome","Profiile","profile","saveProfile","fields","githubToken","DeployList","namespaceId","deploys","deploy","FetchNamespace","namespaceIdProp","namespace","loadingNamespace","confirm","Modal","createDeleteConfirm","deleteNamespace","ExclamationCircleOutlined","okText","okType","cancelText","onOk","NamespaceDetails","savingNamespace","saveNamespace","deletedNamespace","errorDeleting","deletingNamespace","namespaceFields","deleteButton","isMain","placement","Details","New","MicrofrontendVersion","Option","NamespaceDeploy","nextDeploy","savingNextDeploy","saveNextDeploy","micro","Home","FullApp","items","HomeOutlined","rootComponent","GithubFilled","Github","SolutionOutlined","Application","UnorderedListOutlined","Microfrontend","UserOutlined","Profile","Namespace","reverseItems","Object","assign","reverse","selectedMenuIndex","findIndex","item","pathname","replace","startsWith","minWidth","selectedKeys","mode","theme","i","App","Login","handleLogin","handleError","code","useLocalStorage","initialValue","JSON","parse","getItem","storedValue","setStoredValue","setItem","stringify","undefined","useLoggedUser","auth","setAuth","Logout","clearValue","href","LandingPage","process","REACT_APP_GITHUB_CLIENT_ID","Router","setLoggedUser","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b015ae9d.chunk.js","sourcesContent":["import { Method, AxiosRequestConfig } from 'axios';\nimport { useLoggedApiRequest } from './request';\nimport { message } from 'antd';\n\ntype MessageBuilder = (...args: any[]) => string;\n\nconst useApiAction = (\n  url: string,\n  options: {\n    method?: Method;\n    message?: {\n      success?: MessageBuilder | string;\n      loading?: MessageBuilder | string;\n      error?: MessageBuilder | string;\n    };\n  }\n): [any, Function] => {\n  const key = Math.ceil(Math.random() * 10000).toString();\n  const { method = 'POST' } = options;\n  const [{ data, loading, error }, makeRequest] = useLoggedApiRequest({ url, method }, { manual: true });\n\n  const showMessage = (type: 'loading' | 'success' | 'error', messageOptions?: { params: any[]; default: string }) => {\n    if (options.message && options.message[type]) {\n      const messageContructor = options.message[type];\n      let content = '';\n      if (typeof messageContructor === 'string') {\n        content = messageContructor;\n      } else if (typeof messageContructor === 'function') {\n        content = messageContructor.apply(null, messageOptions?.params || []);\n      }\n\n      message[type]({ content, key });\n    } else if (messageOptions?.default) {\n      message[type]({ content: messageOptions.default, key });\n    }\n  };\n\n  const execute = async (config?: AxiosRequestConfig) => {\n    showMessage('loading');\n    try {\n      await makeRequest(config);\n      showMessage('success');\n    } catch ({ response }) {\n      console.log(`Error on request ${method} to ${url}`, response);\n      showMessage('error', {\n        default: response.status >= 500 ? 'Server error. Try again later!' : 'Error processing your request.',\n        params: [response],\n      });\n    }\n  };\n\n  return [{ data, loading, error }, execute];\n};\n\nexport default useApiAction;\n","import { makeUseAxios } from 'axios-hooks';\n\nimport Axios from 'axios';\n\nconst BASE_URL =\n  process.env.NODE_ENV === 'development' ? 'http://localhost:8080/' : 'https://microfrontend-marketplace.appspot.com/';\nexport const useApiRequest = makeUseAxios({\n  axios: Axios.create({\n    baseURL: BASE_URL,\n  }),\n});\n\nexport const useLoggedApiRequest = makeUseAxios({\n  axios: null,\n});\n\nconst configureLoggedApiRequest = (token: any) => {\n  const axios = Axios.create({\n    baseURL: BASE_URL,\n    headers: {\n      Authorization: `${token.token_type} ${token.access_token}`,\n    },\n  });\n  axios.interceptors.response.use(\n    (res) => {\n      return res;\n    },\n    (error) => {\n      const { response } = error;\n      if (response.status === 401) {\n        localStorage.removeItem('auth');\n        window.location.reload();\n        return;\n      }\n      return Promise.reject(error);\n    }\n  );\n  useLoggedApiRequest.configure({ axios });\n};\n\nexport const useGithubApiRequest = makeUseAxios({\n  axios: null,\n});\n\nconst configureGithubApiRequest = (token: any) => {\n  useGithubApiRequest.configure({\n    axios: Axios.create({\n      baseURL: 'https://api.github.com',\n      headers: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    }),\n  });\n};\n\nexport const configureLoggedUser = (loggedUser: any) => {\n  configureLoggedApiRequest(loggedUser.api);\n  configureGithubApiRequest(loggedUser.github);\n};\n\nexport { default as useApiAction } from './api-action';\n","import * as React from 'react';\n\nimport { Typography, Row, Spin } from 'antd';\nconst { Title } = Typography;\n\nexport interface ISectionProps {\n  title: string;\n  children: React.ReactNode;\n  loading?: Boolean;\n}\n\nexport default class Section extends React.Component<ISectionProps> {\n  public render() {\n    const { title, children, loading } = this.props;\n    return (\n      <section>\n        <Title level={4}>{title}</Title>\n        {loading ? (\n          <Row justify=\"center\">\n            <Spin size=\"large\" />\n          </Row>\n        ) : (\n            children\n          )}\n      </section>\n    );\n  }\n}\n","import React, { useEffect } from 'react';\nimport { Card, Col, Row, Typography } from 'antd';\nimport { useLoggedApiRequest } from 'base/hooks/request';\nimport { Link } from 'react-router-dom';\nimport Section from 'base/components/section';\n\ninterface IMicrofrontendListProps {\n  applicationId: string;\n}\n\nconst MicrofrontendList: React.FunctionComponent<IMicrofrontendListProps> = ({ applicationId }) => {\n  const [{ data: microfrontends, loading }, refetch] = useLoggedApiRequest(`/microfrontends?applicationId=${applicationId}`);\n\n  useEffect(() => {\n    refetch();\n  }, []);\n  return (\n    <Section title=\"Microfrontends\" loading={loading}>\n      <Row gutter={[16, 24]}>\n        {microfrontends &&\n          microfrontends.map((microfrontend: any) => (\n            <Col span={6} key={microfrontend.id}>\n              <Card title={microfrontend.name} extra={<Link to={`../microfrontend/${microfrontend.id}`}>Edit</Link>}>\n                {microfrontend.name}\n              </Card>\n            </Col>\n          ))}\n      </Row>\n    </Section>\n  );\n};\n\nexport default MicrofrontendList;\n","import * as React from 'react';\nimport { Card, Col, Row, Typography } from 'antd';\nimport { useLoggedApiRequest } from 'base/hooks/request';\nimport { Link } from 'react-router-dom';\nimport Section from 'base/components/section';\n\ninterface INamespaceListProps {\n  namespaces: any[];\n}\n\nconst NamespaceList: React.FunctionComponent<INamespaceListProps> = ({ namespaces }) => {\n  return (\n    <Section title=\"Namespaces\">\n      <Row gutter={[16, 24]}>\n        {namespaces &&\n          namespaces.map((microfrontend: any) => (\n            <Col span={6} key={microfrontend.id}>\n              <Card title={microfrontend.name} extra={<Link to={`../namespace/${microfrontend.id}`}>Edit</Link>}>\n                {microfrontend.name}\n              </Card>\n            </Col>\n          ))}\n      </Row>\n    </Section>\n  );\n};\n\nexport default NamespaceList;\n","import * as React from 'react';\n\nimport { Typography, Row, Col, Divider, Spin, PageHeader } from 'antd';\nimport { useHistory } from 'react-router-dom';\n\nimport './page.css';\n\nconst { Title } = Typography;\n\nexport interface IPageProps {\n  title: string;\n  subTitle?: string;\n  children: React.ReactNode;\n  actions?: Array<React.ReactNode>;\n  loading?: boolean;\n  rootPage?: boolean;\n}\n\nexport default function Page(props: IPageProps) {\n  const history = useHistory();\n  const { title, children, actions, loading, subTitle, rootPage } = props;\n\n  return (\n    <PageHeader\n      className=\"page\"\n      title={title}\n      subTitle={subTitle}\n      extra={actions}\n      {...(rootPage ? {} : { onBack: () => history.goBack() })}\n    >\n      <Divider style={{ marginTop: '0px' }} />\n      {loading ? (\n        <Row justify=\"center\">\n          <Spin size=\"large\" />\n        </Row>\n      ) : (\n          children\n        )}\n    </PageHeader>\n  )\n}","import React, { useEffect } from 'react';\n\nimport { useLoggedApiRequest } from 'base/hooks/request';\nimport { useParams } from 'react-router-dom';\nimport Page from 'base/components/page';\n\nfunction FetchApplication(props: { children: Function; title: string; applicationId?: string }) {\n  const { children, title, applicationId: applicationIdProp } = props;\n  const { applicationId = applicationIdProp } = useParams();\n  const [{ data: application, loading: loadingApplication, error }, refetch] = useLoggedApiRequest(\n    `/applications/${applicationId}`\n  );\n\n  return (\n    <Page title={title} loading={loadingApplication}>\n      {!loadingApplication && children(application)}\n    </Page>\n  );\n}\n\nexport default FetchApplication;\n","import React, { useEffect } from 'react';\nimport { useLoggedApiRequest } from 'base/hooks/request';\n\nimport { Redirect, Link, useParams } from 'react-router-dom';\nimport { Form, Input, Button, Card, Space } from 'antd';\n\nimport Page from 'base/components/page';\nimport useApiAction from 'base/hooks/api-action';\nimport MicrofrontendList from './microfrontend-list';\nimport NamespaceList from './namespace-list';\nimport FetchApplication from '../fetch';\n\ninterface IApplicationDetailsProps {\n  application: any;\n}\n\nconst ApplicationDetails: React.FunctionComponent<IApplicationDetailsProps> = ({ application }) => {\n  const [{ data, error, loading: savingProfile }, saveApplication] = useApiAction(`/applications/${application.id}`, {\n    method: 'PUT',\n    message: {\n      success: 'Application saved',\n    },\n  });\n  const [{ loading: deployingApplication }, deployApplication] = useApiAction(`/applications/${application.id}/deploy`, {\n    method: 'POST',\n    message: {\n      success: 'Deploy done',\n    },\n  });\n  const [{ data: namespaces, loading: gettingNamespaces }, refetchNamespaces] = useLoggedApiRequest(`/namespaces?applicationId=${application.id}`);\n\n  useEffect(() => {\n    refetchNamespaces();\n  }, []);\n\n  const onFinish = async (data: any) => {\n    await saveApplication({ data });\n  };\n\n  if (gettingNamespaces || !namespaces) return null;\n\n  if (!savingProfile && data && !error) return <Redirect to=\"../application\" />;\n\n  return (\n    <>\n      <Form onFinish={onFinish} initialValues={application}>\n        <Form.Item label=\"Name\" name=\"name\">\n          <Input />\n        </Form.Item>\n\n        <Form.Item>\n          <Space>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Save\n            </Button>\n            <Link to={`../github?applicationId=${application.id}`}>\n              <Button type=\"ghost\">New Microfrontend</Button>\n            </Link>\n            <Link to={`../namespace/new?applicationId=${application.id}`}>\n              <Button type=\"ghost\">New Namespace</Button>\n            </Link>\n            {namespaces.length === 1 ? (\n              <Link to={`../namespace/${namespaces[0].id}/deploy/next`}>\n                <Button type=\"ghost\">Prepare next deploy</Button>\n              </Link>\n            ) : null\n            }\n            <Button type=\"ghost\" loading={deployingApplication} onClick={() => deployApplication()}>Deploy</Button>\n          </Space>\n        </Form.Item>\n      </Form>\n\n      {namespaces.length > 1 && <NamespaceList namespaces={namespaces} />}\n      <MicrofrontendList applicationId={application.id} />\n    </>\n  );\n};\n\nexport default () => (\n  <FetchApplication title=\"Application details\">\n    {(application: any) => <ApplicationDetails application={application} />}\n  </FetchApplication>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useLoggedApiRequest } from 'base/hooks/request';\n\nimport { Link } from 'react-router-dom';\n\nimport Page from 'base/components/page';\nimport { List } from 'antd';\n\nfunction ApplicationList() {\n  const [{ data: applications, loading, error }, refetch] = useLoggedApiRequest('/applications', { manual: true });\n\n  useEffect(() => {\n    refetch();\n  }, []);\n\n  if (!applications) return null;\n  return (\n    <Page title=\"Applications\" rootPage>\n      <List\n        itemLayout=\"vertical\"\n        size=\"large\"\n        dataSource={applications}\n        renderItem={(application: any) => (\n          <List.Item\n            key={application.id}\n            actions={\n              [\n                // <IconText icon={StarOutlined} text={repo.stargazers_count} key=\"list-vertical-star-o\" />,\n                // <IconText icon={MessageOutlined} text={repo.open_issues} key=\"list-vertical-message\" />,\n              ]\n            }\n            extra={<Link to={`./application/${application.id}`}>Edit</Link>}\n          >\n            <List.Item.Meta\n              // avatar={<Avatar icon={<GithubOutlined />} />}\n              title={application.name}\n              description={application.description}\n            />\n            {'asd'}\n          </List.Item>\n        )}\n      />\n    </Page>\n  );\n}\n\nexport default ApplicationList;\n","import React from 'react';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport Details from './details';\nimport List from './list';\n\nfunction ApplicationHome() {\n  let match = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${match.path}/:applicationId`}>\n        <Details />\n      </Route>\n      <Route path={match.path}>\n        <List />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default ApplicationHome;\n","import React from 'react';\nimport { useLoggedApiRequest } from 'base/hooks/request';\n\nimport { useHistory } from 'react-router-dom';\nimport { Form, Input, Button, Select, Card, Typography, Timeline, Table } from 'antd';\nimport useQuery from 'base/hooks/query-param';\nimport Page from 'base/components/page';\nconst { Title } = Typography;\n\nconst NewMicrofrontend: React.FC<{\n  microfrontend: any;\n}> = ({ microfrontend }) => {\n  const isNew = !microfrontend.id;\n  const history = useHistory();\n\n  const [a, syncMicrofrontend] = useLoggedApiRequest(\n    {\n      url: `/microfrontends/${microfrontend.id}/sync`,\n      method: 'POST',\n    },\n    { manual: true }\n  );\n\n  const [{ data: versions = [] }] = useLoggedApiRequest(`/versions?microfrontendId=${microfrontend.id}`);\n\n  const [{ data: result, loading, error }, createmicrofrontend] = useLoggedApiRequest(\n    {\n      url: `/microfrontends${isNew ? '' : `/${microfrontend.id}`}`,\n      method: isNew ? 'POST' : 'PUT',\n    },\n    { manual: true }\n  );\n\n  const onFinish = async (values: any) => {\n    await createmicrofrontend({\n      data: {\n        ...values\n      },\n    });\n    history.goBack();\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const columns = [\n    {\n      title: 'Created at',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n    },\n    {\n      title: 'Action',\n      render: (asd: any) => {\n        return (\n          <span>\n            <Button>Aprove</Button>\n          </span>\n        );\n      },\n      //   render: (text, record) => (\n      // \t<span>\n      // \t  <a style={{ marginRight: 16 }}>Invite {record.name}</a>\n      // \t  <a>Delete</a>\n      // \t</span>\n      //   ),\n    },\n  ];\n\n  const handleSyncClick = async () => {\n    await syncMicrofrontend();\n    window.location.reload();\n  };\n\n  if (result) return null;\n\n  return (\n    <Page title={isNew ? 'Creating' : `Editing ${microfrontend.name}`}>\n      <Form\n        labelCol={{ span: 2 }}\n        name=\"basic\"\n        initialValues={microfrontend}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item label=\"Name\" name=\"name\">\n          <Input />\n        </Form.Item>\n\n        <Form.Item label=\"Package name\" name=\"packageName\">\n          <Input />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Save\n          </Button>\n          <Button type=\"ghost\" onClick={handleSyncClick}>\n            Sync Versions\n          </Button>\n        </Form.Item>\n      </Form>\n\n      {isNew ? null : (\n        <>\n          <Title>Versions</Title>\n          <Table\n            columns={columns}\n            dataSource={versions.map((v: any) => ({\n              ...v,\n              key: v.id,\n            }))}\n          />\n\n          <Title>History</Title>\n          <Timeline>\n            {versions.map((version: any) => (\n              <Timeline.Item key={version.id} color=\"green\">\n                Version {version.name} created at {version.createdAt}\n              </Timeline.Item>\n            ))}\n          </Timeline>\n        </>\n      )}\n    </Page>\n  );\n};\n\nexport default NewMicrofrontend;\n","import React from 'react';\n\nimport { useLoggedApiRequest } from 'base/hooks/request';\nimport { useParams } from 'react-router-dom';\n\nimport MicrofrontendForm from './form';\n\nfunction MicrofrontendDetails() {\n  let { microfrontendId } = useParams();\n  const [{ data: microfrontend, loading, error }, refetch] = useLoggedApiRequest(`/microfrontends/${microfrontendId}`);\n\n  if (loading) return <div>loading</div>;\n\n  return <MicrofrontendForm microfrontend={microfrontend} />;\n}\n\nexport default MicrofrontendDetails;\n","import React from 'react';\nimport MicrofrontendForm from './form';\n\nfunction NewMicrofrontend() {\n  return <MicrofrontendForm microfrontend={{}} />;\n}\n\nexport default NewMicrofrontend;\n","import React, { useEffect, useState } from 'react';\nimport { useLoggedApiRequest } from 'base/hooks/request';\n\nimport { Link } from 'react-router-dom';\n\nimport { Card, Button } from 'antd';\nimport Page from 'base/components/page';\nimport { List } from 'antd';\n\nfunction MicrofrontendList() {\n  const [{ data: microfrontends, loading, error }, refetch] = useLoggedApiRequest('/microfrontends', { manual: true });\n\n  useEffect(() => {\n    refetch();\n  }, []);\n\n  if (!microfrontends) return null;\n\n  return (\n    <Page title=\"Microfrontends\" rootPage>\n      <List\n        itemLayout=\"vertical\"\n        size=\"large\"\n        dataSource={microfrontends}\n        renderItem={(microfrontend: any) => (\n          <List.Item\n            key={microfrontend.id}\n            actions={\n              [\n                // <IconText icon={StarOutlined} text={repo.stargazers_count} key=\"list-vertical-star-o\" />,\n                // <IconText icon={MessageOutlined} text={repo.open_issues} key=\"list-vertical-message\" />,\n              ]\n            }\n            extra={<Link to={`./microfrontend/${microfrontend.id}`}>Edit</Link>}\n          >\n            <List.Item.Meta title={microfrontend.name} description={microfrontend.description} />\n            {'asd'}\n          </List.Item>\n        )}\n      />\n    </Page>\n  );\n}\n\nexport default MicrofrontendList;\n","import React from 'react';\n\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport Details from './details';\nimport New from './new';\nimport List from './list';\n\nfunction MicrofrontendsHome() {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path={`${match.path}/new`}>\n          <New />\n        </Route>\n        <Route path={`${match.path}/:microfrontendId`}>\n          <Details />\n        </Route>\n        <Route path={match.path}>\n          <List />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default MicrofrontendsHome;\n","import React from 'react';\nimport { useLoggedApiRequest } from 'base/hooks/request';\n\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { Form, Input, Button, Card } from 'antd';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst NewVersion: React.FC<{\n  version: any;\n}> = ({ version }) => {\n  const isNew = !version.id;\n  const history = useHistory();\n  const [{ data: result, loading, error }, createVersion] = useLoggedApiRequest(\n    {\n      url: `/versions${isNew ? '' : `/${version.id}`}`,\n      method: isNew ? 'POST' : 'PUT',\n    },\n    { manual: true }\n  );\n\n  const [_, approveVersion] = useLoggedApiRequest(\n    {\n      url: `/versions/${version.id}/approve`,\n      method: 'PUT',\n    },\n    { manual: true }\n  );\n\n  const microfrontendId = useQuery().get('microfrontendId');\n\n  const onFinish = async (values: any) => {\n    const { files, ...rest } = values;\n    const { jsFiles, cssFiles } = files.reduce(\n      (agg: any, file: string) => {\n        if (file.endsWith('.css')) agg.cssFiles.push(file);\n        if (file.endsWith('.js')) agg.jsFiles.push(file);\n        return agg;\n      },\n      { jsFiles: [], cssFiles: [] }\n    );\n    await createVersion({\n      data: {\n        ...rest,\n        files: {\n          js: jsFiles,\n          css: cssFiles,\n        },\n        microfrontendId,\n      },\n    });\n    history.goBack();\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const handleApprove = async () => {\n    await approveVersion();\n  };\n\n  if (result) return null;\n\n  return (\n    <Card title={isNew ? 'Creating' : `Editing ${version.name}`} style={{ margin: '32px' }}>\n      <Form labelCol={{ span: 2 }} name=\"basic\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\n        <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true, message: 'Your version name.' }]}>\n          <Input />\n        </Form.Item>\n\n        {version.status}\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Save\n          </Button>\n          {version.status === 'NEEDS_APROVAL' && (\n            <Button type=\"default\" onClick={handleApprove}>\n              Approve\n            </Button>\n          )}\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n\nexport default NewVersion;\n","import React from 'react';\n\nimport { useLoggedApiRequest } from 'base/hooks/request';\nimport { useParams } from 'react-router-dom';\n\nimport VersionForm from './form';\n\nfunction VersionDetails() {\n  let { versionId } = useParams();\n  const [{ data: version, loading, error }, refetch] = useLoggedApiRequest(`/versions/${versionId}`);\n\n  if (loading) return <div>loading</div>;\n\n  return <VersionForm version={version} />;\n}\n\nexport default VersionDetails;\n","import React from 'react';\nimport VersionForm from './form';\n\nfunction NewVersion() {\n  return <VersionForm version={{}} />;\n}\n\nexport default NewVersion;\n","import React from 'react';\n\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport Details from './details';\nimport New from './new';\n\nfunction VersionsHome() {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path={`${match.path}/new`}>\n          <New />\n        </Route>\n        <Route path={`${match.path}/:versionId`}>\n          <Details />\n        </Route>\n        {/* <Route path={match.path}><List /></Route> */}\n      </Switch>\n    </div>\n  );\n}\n\nexport default VersionsHome;\n","import { useLocation } from 'react-router-dom';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport default useQuery;\n","import React, { useState } from 'react';\nimport { useLoggedApiRequest, useGithubApiRequest } from 'base/hooks/request';\nimport Page from 'base/components/page';\nimport { Redirect, useParams } from 'react-router-dom';\n\nimport { Descriptions, Button, Form, Input, Radio } from 'antd';\nimport useApiAction from 'base/hooks/api-action';\nimport useQuery from 'base/hooks/query-param';\nimport FetchApplication from 'modules/application/fetch';\n\nfunction ImportRepository(props: { application?: any }) {\n  const { application } = props;\n  const { owner, repositoryName } = useParams();\n  const repositoryFullName = `${owner}/${repositoryName}`;\n  const [form] = Form.useForm();\n  const [importType, setImportType] = useState('application');\n\n  const onFormChanged = (values: any) => {\n    if (values.importType) setImportType(values.importType);\n  };\n\n  const shouldShowImportType = !application;\n  const shouldShowApplicationIdField = !application && importType === 'microfrontend';\n\n  const [{ data: repository, loading: loadingRepository }] = useGithubApiRequest(`/repos/${repositoryFullName}`);\n\n  const [{ data: importedApplication, loading: importingApplication }, importApplication] = useApiAction(\n    `/applications/import`,\n    {\n      message: { success: 'Application imported' },\n    }\n  );\n  const [{ data: importedMicrofrontend, loading: importingMicrofrotend }, importMicrofrontend] = useApiAction(\n    `/microfrontends/import`,\n    {\n      message: { success: 'Mifrofrontend imported' },\n    }\n  );\n\n  const onFinish = async (values: any) => {\n    if (values.importType === 'application') {\n      await importApplication({\n        data: {\n          repositoryName: repositoryFullName,\n          packageName: values.packageName,\n          name: values.name,\n        },\n      });\n      return;\n    }\n\n    await importMicrofrontend({\n      data: {\n        repositoryName: repositoryFullName,\n        applicationId: application?.id || values.applicationId,\n        packageName: values.packageName,\n        name: values.name,\n      },\n    });\n  };\n\n  if (!importingApplication && importedApplication) {\n    return <Redirect to={`../../../application/${importedApplication.id}`} />;\n  }\n  if (!importingMicrofrotend && importedMicrofrontend) {\n    return <Redirect to={`../../../microfrontend/${importedMicrofrontend.id}`} />;\n  }\n  if (loadingRepository) return <span>loading</span>;\n\n  return (\n    <Form\n      form={form}\n      initialValues={{\n        importType,\n        name: repository.name,\n      }}\n      onValuesChange={onFormChanged}\n      onFinish={onFinish}\n    >\n      {application && (\n        <Descriptions title=\"Repository infos\">\n          <Descriptions.Item label=\"Application destiny\">{application.name}</Descriptions.Item>\n        </Descriptions>\n      )}\n\n      <Form.Item label=\"Name\" name=\"name\">\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"Package name\" name=\"packageName\">\n        <Input />\n      </Form.Item>\n      {shouldShowImportType && (\n        <Form.Item label=\"Import type\" name=\"importType\">\n          <Radio.Group value={importType}>\n            <Radio.Button value=\"application\">Application</Radio.Button>\n            <Radio.Button value=\"microfrontend\">Microfrontend</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n      )}\n\n      {shouldShowApplicationIdField && (\n        <Form.Item label=\"Application Id\" name=\"applicationId\">\n          <Input />\n        </Form.Item>\n      )}\n\n      <div>\n        <Button htmlType=\"submit\" type=\"primary\" disabled={importingApplication || importingMicrofrotend}>\n          Import\n        </Button>\n      </div>\n    </Form>\n  );\n}\n\nexport default () => {\n  const importApplicationId = useQuery().get('applicationId');\n\n  if (!importApplicationId) return (\n    <Page title={\"Import repository\"}>\n      <ImportRepository />\n    </Page>\n  );\n\n  return (\n    <FetchApplication title=\"Import repository\" applicationId={importApplicationId}>\n      {(application: any) => <ImportRepository application={application} />}\n    </FetchApplication>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { List, Avatar, Typography, Input } from 'antd';\nimport { MessageOutlined, LikeOutlined, StarOutlined, GithubOutlined, SearchOutlined } from '@ant-design/icons';\n\nimport useLoggedUser from 'base/hooks/user';\nimport { useGithubApiRequest } from 'base/hooks/request';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport Page from 'base/components/page';\nimport useQuery from 'base/hooks/query-param';\n\nconst IconText: React.FC<{\n  icon: any;\n  text: any;\n}> = ({ icon, text }) => (\n  <span>\n    {React.createElement(icon, { style: { marginRight: 8 } })}\n    {text}\n  </span>\n);\n\nconst Repos: React.FC<{}> = () => {\n  const [searchText, setSearchText] = useState('');\n  const [{ data: repos, loading }, fetchRepos] = useGithubApiRequest('/user/repos?type=owner');\n\n  const queryParam = useQuery();\n\n  const getUrlToImport = (repo: any) => {\n    let url = `./github/import/${repo.full_name}`;\n    if (queryParam.get('applicationId')) url += `?applicationId=${queryParam.get('applicationId')}`;\n    return url;\n  };\n\n  return (\n    <Page title=\"Github Repositories\" rootPage>\n      <Input\n        size=\"large\"\n        placeholder=\"Search\"\n        prefix={<SearchOutlined />}\n        value={searchText}\n        onChange={(e) => setSearchText(e.target.value)}\n      />\n      <List\n        itemLayout=\"vertical\"\n        size=\"large\"\n        loading={loading}\n        dataSource={(repos || []).filter((repo: any) => repo.name.indexOf(searchText) > -1)}\n        renderItem={(repo: any) => (\n          <List.Item\n            key={repo.id}\n            actions={[\n              <IconText icon={StarOutlined} text={repo.stargazers_count} key=\"list-vertical-star-o\" />,\n              <IconText icon={MessageOutlined} text={repo.open_issues} key=\"list-vertical-message\" />,\n            ]}\n            extra={<Link to={getUrlToImport(repo)}>Import</Link>}\n          >\n            <List.Item.Meta\n              avatar={<Avatar icon={<GithubOutlined />} />}\n              title={repo.name}\n              description={repo.description}\n            />\n            {'asd'}\n          </List.Item>\n        )}\n      />\n    </Page>\n  );\n};\n\nexport default Repos;\n","import React from 'react';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport Import from './import';\nimport Repositories from './repositories';\n\nfunction GithubHome() {\n  let match = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route exact path={`${match.path}`}>\n        <Repositories />\n      </Route>\n      <Route path={`${match.path}/import/:owner/:repositoryName`}>\n        <Import />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default GithubHome;\n","import React from 'react';\nimport { useLoggedApiRequest } from 'base/hooks/request';\nimport useApiAction from 'base/hooks/api-action';\nimport { Link } from 'react-router-dom';\nimport Page from 'base/components/page';\n\nimport { Form, Input, Button, Space, Spin } from 'antd';\n\nfunction Profiile() {\n  const [{ data: profile, loading, error }, refetch] = useLoggedApiRequest('/users/me');\n\n  const [{ loading: savingProfile }, saveProfile] = useApiAction('/users/me', {\n    method: 'put',\n    message: {\n      success: 'User saved',\n    },\n  });\n\n  const onFinish = async (fields: any) => {\n    await saveProfile({\n      data: {\n        githubToken: fields.githubToken,\n      },\n    });\n  };\n\n  return (\n    <Page title=\"Profile\">\n      {loading ? (\n        <Spin size=\"large\" />\n      ) : (\n          <Form name=\"basic\" initialValues={profile} onFinish={onFinish}>\n            <Form.Item label=\"Github Token\" name=\"githubToken\">\n              <Input />\n            </Form.Item>\n\n            <Form.Item>\n              <Space>\n                <Button type=\"primary\" htmlType=\"submit\" loading={savingProfile}>\n                  Save\n              </Button>\n                <Link to=\"/logout\">\n                  <Button type=\"ghost\">Logout</Button>\n                </Link>\n              </Space>\n            </Form.Item>\n          </Form>\n        )}\n    </Page>\n  );\n}\n\nexport default Profiile;\n","import * as React from 'react';\nimport { Card, Col, Row, Typography, Timeline } from 'antd';\nimport { useLoggedApiRequest, useApiAction } from 'base/hooks/request';\nimport { Link } from 'react-router-dom';\nimport Section from 'base/components/section';\n\ninterface IDeployListProps {\n  namespaceId: string;\n}\n\nconst STATUS_COLOR = {\n\n};\nconst DeployList: React.FunctionComponent<IDeployListProps> = ({ namespaceId }) => {\n  const [{ data: history, loading }] = useLoggedApiRequest(`/namespaces/${namespaceId}/history`);\n\n  return (\n    <Section title=\"Deploys\" loading={loading}>\n      <Timeline>\n        {history &&\n          history.deploys.map((deploy: any) => (\n            <Timeline.Item color=\"green\">\n              Deploy {deploy.id} created at {deploy.createdAt}\n            </Timeline.Item>\n          ))}\n      </Timeline>\n    </Section>\n  );\n};\n\nexport default DeployList;\n","import React from 'react';\n\nimport { useLoggedApiRequest } from 'base/hooks/request';\nimport { useParams } from 'react-router-dom';\nimport Page from 'base/components/page';\n\nfunction FetchNamespace(props: { children: Function; title?: string; namespaceId?: string }) {\n  const { children, title, namespaceId: namespaceIdProp } = props;\n  const { namespaceId = namespaceIdProp } = useParams();\n  const [{ data: namespace, loading: loadingNamespace, error }] = useLoggedApiRequest(\n    `/namespaces/${namespaceId}`\n  );\n\n  if (loadingNamespace) return null;\n\n  if (!title) return children(namespace);\n\n  return (\n    <Page title={title} loading={loadingNamespace}>\n      {!loadingNamespace && children(namespace)}\n    </Page>\n  );\n}\n\nexport default FetchNamespace;\n","import React from 'react';\nimport { useLoggedApiRequest } from 'base/hooks/request';\n\nimport { Redirect, Link, useParams } from 'react-router-dom';\nimport { Form, Input, Button, Card, Space, Modal, Tooltip } from 'antd';\nimport {\n  ExclamationCircleOutlined\n} from '@ant-design/icons';\n\nimport useQuery from 'base/hooks/query-param';\nimport Page from 'base/components/page';\nimport useApiAction from 'base/hooks/api-action';\nimport DeployList from './deploy-list';\nimport FetchNamespace from '../fetch';\n\nconst { confirm } = Modal;\n\ninterface INamespaceDetailsProps {\n  namespace: any;\n}\n\nconst createDeleteConfirm = (deleteNamespace: Function) => () => {\n  confirm({\n    title: 'Are you sure delete this namespace?',\n    icon: <ExclamationCircleOutlined />,\n    content: 'This action cannot be undone',\n    okText: 'Yes',\n    okType: 'danger',\n    cancelText: 'No',\n    onOk() {\n      deleteNamespace();\n    }\n  });\n}\n\nconst NamespaceDetails: React.FunctionComponent<INamespaceDetailsProps> = ({ namespace }) => {\n  const isNew = !namespace.id;\n\n  const [{ data, error, loading: savingNamespace }, saveNamespace] = useApiAction(`/namespaces${isNew ? '' : `/${namespace.id}`}`, {\n    method: isNew ? 'POST' : 'PUT',\n    message: {\n      success: 'Namespace saved',\n    },\n  });\n\n  const [{ data: deletedNamespace, error: errorDeleting, loading: deletingNamespace }, deleteNamespace] = useApiAction(`/namespaces/${namespace.id}`, {\n    method: 'DELETE',\n    message: {\n      success: 'Namespace deleted',\n    },\n  });\n\n  const onFinish = async (namespaceFields: any) => {\n    await saveNamespace({\n      ...namespace, data: {\n        ...namespace,\n        ...namespaceFields\n      }\n    });\n  };\n\n  const savedSuccessfully = !savingNamespace && data && !error;\n  const deletedSuccessfully = !deletingNamespace && deletedNamespace && !errorDeleting;\n  if (savedSuccessfully || deletedSuccessfully) return <Redirect to={`../application/${namespace.applicationId}`} />;\n\n\n  const deleteButton = (\n    <Button\n      type=\"dashed\"\n      onClick={createDeleteConfirm(deleteNamespace)}\n      loading={deletingNamespace}\n      disabled={namespace.isMain}\n    >\n      Delete\n    </Button>\n  );\n  return (\n    <>\n      <Form onFinish={onFinish} initialValues={namespace}>\n        <Form.Item label=\"Name\" name=\"name\">\n          <Input />\n        </Form.Item>\n\n        <Form.Item label=\"Url path\" name=\"path\">\n          <Input />\n        </Form.Item>\n\n        <Form.Item>\n          <Space>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Save\n            </Button>\n            {\n              !isNew && (\n                namespace.isMain ? (\n                  <Tooltip placement=\"topLeft\" title=\"Cannot delete main namespace\">\n                    {deleteButton}\n                  </Tooltip>\n                ) : deleteButton\n              )\n            }\n            {!isNew && (\n              <Link to={`./${namespace.id}/deploy/next`}>\n                <Button type=\"ghost\">Update next deploy</Button>\n              </Link>\n            )}\n          </Space>\n        </Form.Item>\n\n        {!isNew && <DeployList namespaceId={namespace.id} />}\n      </Form>\n    </>\n  );\n};\n\nexport const Details = () => (\n  <FetchNamespace title=\"Namespace details\">\n    {(namespace: any) => <NamespaceDetails namespace={namespace} />}\n  </FetchNamespace>\n);\n\nexport const New = () => {\n  const applicationId = useQuery().get('applicationId');\n\n  return (\n    <Page title=\"New namespace\">\n      <NamespaceDetails namespace={{ applicationId }} />\n    </Page>\n  );\n};","import React from 'react';\nimport { useLoggedApiRequest, useApiAction } from 'base/hooks/request';\nimport { useParams } from 'react-router-dom';\nimport Page from 'base/components/page';\nimport { Form, Select, Space, Button } from 'antd';\nimport FetchNamespace from './fetch';\n\nfunction MicrofrontendVersion(props: { microfrontend: any }) {\n  const { microfrontend } = props;\n  const [{ data: versions, loading, error }] = useLoggedApiRequest(\n    `/versions?microfrontendId=${microfrontend.id}`\n  );\n\n  if (loading) return <span>loading</span>;\n\n  return (\n    <Form.Item label={microfrontend.name} name={microfrontend.id} required>\n      <Select>\n        {versions.map((version: any) => (\n          <Select.Option key={version.id} value={version.id}>\n            {version.name}\n          </Select.Option>\n        ))}\n      </Select>\n    </Form.Item>\n  );\n}\n\nfunction NamespaceDeploy(props: { namespace: any }) {\n  const { namespace } = props;\n\n  const [{ data: nextDeploy, loading: loadingNamespace }] = useLoggedApiRequest(`/namespaces/${namespace.id}/deploy/next`);\n  const [{ data: microfrontends }] = useLoggedApiRequest(`/microfrontends?applicationId=${namespace.applicationId}`);\n  const [{ loading: savingNextDeploy }, saveNextDeploy] = useApiAction(`/namespaces/${namespace.id}/deploy/next`, {\n    method: 'PUT',\n    message: {\n      success: 'Next deploy saved',\n    },\n  });\n\n\n  const onFinish = async (versions: any) => {\n    await saveNextDeploy({ data: { versions } });\n  };\n\n  if (loadingNamespace) return null;\n\n  return (\n    <Page title={`Configure next deploy in namespace ${namespace.name}`}>\n      <Form name=\"basic\" onFinish={onFinish} initialValues={nextDeploy.versions}>\n        {microfrontends && microfrontends.map((micro: any) => <MicrofrontendVersion key={micro.id} microfrontend={micro} />)}\n        <Form.Item>\n          <Space>\n            <Button type=\"primary\" htmlType=\"submit\" loading={savingNextDeploy}>\n              Save\n            </Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </Page>\n  );\n}\n\nexport default () => (\n  <FetchNamespace>\n    {(namespace: any) => <NamespaceDeploy namespace={namespace} />}\n  </FetchNamespace>\n);\n","import React from 'react';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport { Details, New } from './details';\nimport Deploy from './deploy';\n\nfunction ApplicationHome() {\n  let match = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${match.path}/new`}>\n        <New />\n      </Route>\n      <Route path={`${match.path}/:namespaceId/deploy/next`}>\n        <Deploy />\n      </Route>\n      <Route path={`${match.path}/:namespaceId`}>\n        <Details />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default ApplicationHome;\n","import React from 'react';\nimport './App.css';\nimport Application from 'modules/application';\nimport Microfrontend from 'modules/microfrontend';\nimport { Menu } from 'antd';\nimport { GithubFilled, SolutionOutlined, UserOutlined, HomeOutlined, UnorderedListOutlined } from '@ant-design/icons';\n\nimport { BrowserRouter as Router, Switch, Route, Link, useRouteMatch, useHistory } from 'react-router-dom';\n\nimport Version from 'modules/version';\nimport Github from 'modules/github';\nimport Profile from 'modules/account/profile';\nimport Namespace from 'modules/namespace';\n\n\nfunction Home() {\n  return (<div>Home</div>);\n}\n\nfunction FullApp() {\n  const match = useRouteMatch();\n  const history = useHistory();\n\n  const items = [\n    { label: 'Home', icon: HomeOutlined, rootComponent: Home, url: '/' },\n    { label: 'Repositories', icon: GithubFilled, rootComponent: Github, url: '/github' },\n    { label: 'Applications', icon: SolutionOutlined, rootComponent: Application, url: '/application' },\n    { label: 'Microfrontends', icon: UnorderedListOutlined, rootComponent: Microfrontend, url: '/microfrontend' },\n    { label: 'Profile', icon: UserOutlined, rootComponent: Profile, url: '/profile' },\n    { rootComponent: Namespace, url: '/namespaces' },\n  ];\n\n  const reverseItems: Array<any> = Object.assign([], items);\n  reverseItems.reverse();\n  const selectedMenuIndex =\n    reverseItems.length -\n    reverseItems.findIndex((item) => history.location.pathname.replace(match.path, '').startsWith(item.url)) -\n    1;\n\n  return (\n    <>\n      <Menu style={{ minWidth: 256 }} selectedKeys={[selectedMenuIndex.toString()]} mode={'vertical'} theme={'dark'}>\n        {items\n          .filter((item) => item.label && item.icon)\n          .map((item, i) => (\n            <Menu.Item key={i}>\n              <Link to={`${match.path}${item.url}`}>\n                {item.icon && <item.icon />}\n                {item.label}\n              </Link>\n            </Menu.Item>\n          ))\n        }\n      </Menu>\n      <main className=\"App__container\">\n        <Switch>\n          <Route path={`${match.path}/application`}>\n            <Application />\n          </Route>\n          <Route path={`${match.path}/namespace`}>\n            <Namespace />\n          </Route>\n          <Route path={`${match.path}/microfrontend`}>\n            <Microfrontend />\n          </Route>\n          <Route path={`${match.path}/version`}>\n            <Version />\n          </Route>\n          <Route path={`${match.path}/github`}>\n            <Github />\n          </Route>\n          <Route path={`${match.path}/profile`}>\n            <Profile />\n          </Route>\n          <Route path={`${match.path}/`}>\n            HOME\n          </Route>\n        </Switch>\n      </main>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FullApp />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useEffect } from 'react';\n\nimport useLoggedUser from 'base/hooks/user';\n\nimport { Redirect, useLocation } from 'react-router-dom';\n\nimport { useApiRequest } from 'base/hooks/request';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nfunction Login(props: { handleLogin: Function, handleError: Function }) {\n  const { handleLogin, handleError } = props;\n  const query = useQuery();\n  const code = query.get('code');\n  const [{ data, loading, error }, refetch] = useApiRequest({\n    url: `/oauth/github?code=${code}`,\n    method: 'POST',\n  });\n\n  useEffect(() => {\n    if (data) {\n      handleLogin(data);\n    } else if (error) {\n      handleError();\n    }\n  });\n\n  return <div>Loading</div>;\n}\n\nexport default Login;\n","import { useState } from 'react';\nfunction useLocalStorage(key: string, initialValue?: string): [string | undefined, Function, Function] {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = JSON.parse(window.localStorage.getItem(key) || '');\n      return item ? item : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: string) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const clearValue = () => {\n    setStoredValue(undefined);\n    window.localStorage.removeItem(key);\n  };\n\n  return [storedValue, setValue, clearValue];\n}\n\nexport default useLocalStorage;\n","import useLocalStorage from './local-storage';\nimport { configureLoggedUser } from './request';\n\nconst useLoggedUser = (): [any, Function, Function] => {\n  const [auth, setAuth, clearLoggedUser] = useLocalStorage('auth');\n  const setLoggedUser = (loggedUser: any) => {\n    configureLoggedUser(loggedUser);\n    setAuth(loggedUser);\n  };\n  return [auth, setLoggedUser, clearLoggedUser];\n};\n\nexport default useLoggedUser;\n","import React from 'react';\nimport useLoggedUser from '../../base/hooks/user';\nimport { Redirect } from 'react-router-dom';\n\nfunction Logout() {\n  const [auth, _, clearValue] = useLoggedUser();\n\n  if (auth) {\n    clearValue();\n    return <></>;\n  }\n  window.location.href = '/';\n  return <></>;\n}\n\nexport default Logout;\n","import React from 'react';\n\nfunction LandingPage() {\n  return (\n    <div>\n      <a\n        href={`https://github.com/login/oauth/authorize?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&redirect_uri=http://localhost:3000/login`}\n      >\n        login with github\n      </a>\n    </div>\n  );\n}\n\nexport default LandingPage;\n","import React, { useEffect } from 'react';\n\nimport { Switch, Route, useHistory, Redirect } from 'react-router-dom';\n\nimport Home from './home';\nimport Login from 'modules/github/login';\nimport Logout from 'modules/account/logout';\nimport LandingPage from 'modules/landing';\nimport useLoggedUser from 'base/hooks/user';\nimport { configureLoggedUser } from 'base/hooks/request';\n\nconst LOGIN_URL = '/login';\nconst LANDING_PAGE_URL = '/';\nconst LOGGED_HOME_URL = '/home';\n\nfunction Router() {\n  const history = useHistory();\n  const [loggedUser, setLoggedUser] = useLoggedUser();\n\n  if (loggedUser) {\n    configureLoggedUser(loggedUser);\n  }\n\n  if (history.location.pathname.startsWith('/logout')) {\n    return <Logout />;\n  }\n\n  if (!history.location.pathname.startsWith(LOGGED_HOME_URL) && !!loggedUser) {\n    return <Redirect to={LOGGED_HOME_URL} />;\n  }\n\n  if (history.location.pathname.startsWith(LOGGED_HOME_URL) && !loggedUser) {\n    return <Redirect to={LANDING_PAGE_URL} />;\n  }\n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <LandingPage />\n      </Route>\n      <Route path=\"/login\">\n        <Login handleLogin={setLoggedUser} handleError={() => history.push('/')} />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Router;\n","import React from 'react';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport MainRouter from './router';\n\nfunction App() {\n  return (\n    <Router>\n      <MainRouter />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}